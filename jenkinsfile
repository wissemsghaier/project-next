def COMMIT_ID
pipeline {
  agent any 
  tools {nodejs "NodeJS"}
  stages {
    stage('Checkout') {
      steps {
        script {
          checkout([$class: 'GitSCM',
            branches: [[name: "main"]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[credentialsId: 'wiss-git', url: 'https://gitlab.com/wissemsghaier2000/project_next.git']]
          ]) 
          sh "git rev-parse --short HEAD > commit_hash.txt"
          COMMIT_ID = readFile('commit_hash.txt').trim()
          echo "Commit Hash: ${COMMIT_ID}"
        }          
      }
    }   
    stage ('istall package ') {  
      steps {
        nodejs(nodeJSInstallationName: 'NodeJS'){
          sh ' npm install'
        }  
      }
    }
    stage ('build ') {
      steps {
        nodejs(nodeJSInstallationName: 'NodeJS'){
          sh " npm run build"
        }
      }  
    }
    /*stage ('test') {
      steps{
        nodejs(nodeJSInstallationName: 'NodeJS'){
          sh " npm run test "
        }
      }
    }
    */
    stage('Code Quality Check via SonarQube') {
      steps {
        script {
          def scannerHome = tool 'sonarqube-scanner';
          withSonarQubeEnv("SonarQube") {
            sh "${tool("sonarqube-scanner")}/bin/sonar-scanner \
            -Dsonar.projectName=test-app \
            -Dsonar.projectKey=test-app\
            -Dsonar.sources=. \
            -Dsonar.host.url=http://172.20.0.1:9001/  \
            -Dsonar.language=js \
            -Dsonar.login=squ_e798c50ee42eb24e478af95e51491fd9e75bcc5e"
          }
        }
      }
    }
    stage("Quality Gate") {
      steps {
        sleep 60
        waitForQualityGate abortPipeline: true
      }
    }
  }
  post {
    always {      
      cleanWs()      
    }
  }  
}
